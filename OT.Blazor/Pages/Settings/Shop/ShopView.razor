@page "/settings/shops"
@inject HttpClient _httpClient
@inject ShopService ShopService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using OT.Shared

<!-- Heading with create button -->
<div class="container mb-3">
    <div class="row">
        <div class="mb-3">
            <h1>Shops</h1>
        </div>
        <div class="mb-3">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createShopModal">Create New Shop</button>
        </div>
    </div>
</div>

<!-- Main content table -->
<div class="mb-3">
    @if (shops == null)
    {
        <p><em>Loading ....</em></p>
    }
    else if (shops.Count == 0)
    {
        <p><em>No Shops Found.</em></p>
    }
    else
    {
        <table class="table table-bordered table-responsive table-striped table-primary">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Owner First Name</th>
                    <th>Owner Last Name</th>
                    <th>Phone</th>
                    <th>Email</th>
                    <th>Owner Phone</th>
                    <th>Owner Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var shop in shops)
                {
                    <tr>
                        <td>
                            @shop.ShopName
                        </td>
                        <td>
                            @shop.ShopOwnerFirstName
                        </td>
                        <td>
                            @shop.ShopOwnerLastName
                        </td>
                        <td>
                            @shop.ShopPhone
                        </td>
                        <td>
                            @shop.ShopEmail
                        </td>
                        <td>
                            @shop.ShopOwnerPhone
                        </td>
                        <td>
                            @shop.ShopOwnerEmail
                        </td>
                        <td>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editShopModal" @onclick="() => SetCurrentShop(shop)">
                                Edit
                            </button> | 
                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteShopModal" @onclick="() => ConfirmDelete(shop.Id, shop.ShopName)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Create Shop Modal -->
<div class="modal fade" data-bs-backdrop="static" id="createShopModal" tabindex="-1" aria-labelledby="createShopModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="createShopModalLabel">Create Shop</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="createShop" OnValidSubmit="HandleCreateValidSubmnit">
                    <div class="row">
                        <div class="mb-1">
                            <label for="createShopName" class="form-control">Shop Name:</label>
                            <InputText id="createShopName" class="form-control" @bind-Value="createShop.ShopName" />
                        </div>                        
                    </div>
                    <div class="row row-cols-2">
                        <div class="mb-1">
                            <label for="createShopPhone" class="form-control">Shop Phone:</label>
                            <InputText id="createShopPhone" class="form-control" @bind-Value="createShop.ShopPhone" />
                        </div>
                        <div class="mb-1">
                            <label for="createShopEmail" class="form-control">Shop Email:</label>
                            <InputText id="createShopEmail" class="form-control" @bind-Value="createShop.ShopEmail" />
                        </div>
                    </div>
                    <div class="row row-cols-2">
                        <div class="mb-1">
                            <label for="createShopOwnerFirstName" class="form-control">Owner's First Name:</label>
                            <InputText id="createShopOwnerFirstName" class="form-control" @bind-Value="createShop.ShopOwnerFirstName" />
                        </div>
                        <div class="mb-1">
                            <label for="createShopOwnerLastName" class="form-control">Owner's Last Name:</label>
                            <InputText id="createShopOwnerLastName" class="form-control" @bind-Value="createShop.ShopOwnerLastName" />
                        </div>
                    </div>
                    <div class="row row-cols-2">
                        <div class="mb-1">
                            <label for="createShopOwnerPhone" class="form-control">Owner's Phone:</label>
                            <InputText id="createShopOwnerPhone" class="form-control" @bind-Value="createShop.ShopOwnerPhone" />
                        </div>
                        <div class="mb-1">
                            <label for="createShopOwnerEmail" class="form-control">Owner's Email:</label>
                            <InputText id="createShopOwnerEmail" class="form-control" @bind-Value="createShop.ShopOwnerEmail" />
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" @onclick="CreateShop" disabled="@isProcessing">Create Shop</button>
                @if (!string.IsNullOrEmpty(feedbackMessage))
                {
                    <div class="alert alert-warning" role="alert">
                        @feedbackMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Edit Shop Modal -->
<div class="modal fade" data-bs-backdrop="static" id="editShopModal" tabindex="-1" aria-labelledby="editShopModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="editShopModalLabel">Edit Shop: @currentShopName</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="createShop" OnValidSubmit="HandleCreateValidSubmnit">
                    <div class="row">
                        <div class="mb-1">
                            <label for="editShopName" class="form-control">Shop Name:</label>
                            <InputText id="editShopName" class="form-control" @bind-Value="currentShop.ShopName" />
                        </div>
                        <div class="mb-1">
                            <label for="editShopOwner" class="form-control">Shop Owner:</label>
                            TODO: Implement This
                        </div>                        
                    </div>
                    <div class="row row-cols-2">
                        <div class="mb-1">
                            <label for="editShopPhone" class="form-control">Shop Phone:</label>
                            <InputText id="editShopPhone" class="form-control" @bind-Value="currentShop.ShopPhone" />
                        </div>
                        <div class="mb-1">
                            <label for="editShopEmail" class="form-control">Shop Email:</label>
                            <InputText id="editShopEmail" class="form-control" @bind-Value="currentShop.ShopEmail" />
                        </div>
                    </div>
                    <div class="row row-cols-2">
                        <div class="mb-1">
                            <label for="editShopOwnerFirstName" class="form-control">Owner's First Name:</label>
                            <InputText id="editShopOwnerFirstName" class="form-control" @bind-Value="currentShop.ShopOwnerFirstName" />
                        </div>
                        <div class="mb-1">
                            <label for="editShopOwnerLastName" class="form-control">Owner's Last Name:</label>
                            <InputText id="editShopOwnerLastName" class="form-control" @bind-Value="currentShop.ShopOwnerLastName" />
                        </div>
                    </div>
                    <div class="row row-cols-2">
                        <div class="mb-1">
                            <label for="editShopOwnerPhone" class="form-control">Owner's Phone:</label>
                            <InputText id="editShopOwnerPhone" class="form-control" @bind-Value="currentShop.ShopOwnerPhone" />
                        </div>
                        <div class="mb-1">
                            <label for="editShopOwnerEmail" class="form-control">Owner's Email:</label>
                            <InputText id="editShopOwnerEmail" class="form-control" @bind-Value="currentShop.ShopOwnerEmail" />
                        </div>
                    </div>
                    
                    
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" @onclick="SaveShop" disabled="@isProcessing">Save Changes</button>
                @if (!string.IsNullOrEmpty(feedbackMessage))
                {
                    <div class="alert alert-warning" role="alert">
                        @feedbackMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Delete Shop Modal -->
<div class="modal fade" data-bs-backdrop="static" id="deleteShopModal" tabindex="-1" aria-labelledby="deleteShopModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteShopModalLabel">Confirm @currentShopName Delete</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the color '@currentShopName'?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">No</button>
                <button type="button" class="btn btn-success" @onclick="DeleteShop" data-bs-dismiss="modal">Yes</button>                
            </div>
        </div>
    </div>
</div>


@code {
    private List<Shop> shops;
    private int currentShopId;
    private string currentShopName;
    private string feedbackMessage = "";
    private Shop currentShop = new Shop();
    private Shop createShop = new Shop();
    private bool isProcessing = false;
    private bool isNavigating = false;

    protected override async Task OnInitializedAsync()
    {
        shops = await ShopService.GetShopsAsync();
    }

    private async Task HandleCreateValidSubmnit()
    {
        await CreateShop();
    }

    private async Task CreateShop()
    {
        isProcessing = true;

        isProcessing = false;
    }

    private async Task CloseModal()
    {
        await JS.InvokeVoidAsync("modals.closeModal", "createShopModal");
    }

    private void SetCurrentShop(Shop shop)
    {
        currentShop = shop;
    }

    private async Task HandleValidSubmit()
    {
        await SaveShop();
    }

    private async Task SaveShop()
    {
        Console.WriteLine("Attempting to save shop ...");
    }

    private void ConfirmDelete(int shopId, string shopName)
    {
        currentShopId = shopId;
        currentShopName = shopName;
        StateHasChanged();
    }

    private async Task DeleteShop()
    {
        bool deleted = await ShopService.DeleteShop(currentShopId);
        if (deleted)
        {
            shops.RemoveAll(x => x.Id == currentShopId);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to delte the shop.");
        }
    }
}
