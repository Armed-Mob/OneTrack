@page "/settings/shops"
@inject HttpClient _httpClient
@inject ShopService ShopService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using OT.Shared

<!-- Heading with create button -->
<div class="container mb-3">
    <div class="row">
        <div class="mb-3">
            <h1>Shops</h1>
        </div>
        <div class="mb-3">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createShopModal">Create New Shop</button>
        </div>
    </div>
</div>

<!-- Main content table -->
<div class="mb-3">
    @if (shops == null)
    {
        <p><em>Loading ....</em></p>
    }
    else if (shops.Count == 0)
    {
        <p><em>No Shops Found.</em></p>
    }
    else
    {
        <table class="table table-bordered table-responsive table-striped table-primary">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Owner First Name</th>
                    <th>Owner Last Name</th>
                    <th>Phone</th>
                    <th>Email</th>
                    <th>Owner Phone</th>
                    <th>Owner Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var shop in shops)
                {
                    <tr>
                        <td>
                            @shop.ShopName
                        </td>
                        <td>
                            @shop.ShopOwnerFirstName
                        </td>
                        <td>
                            @shop.ShopOwnerLastName
                        </td>
                        <td>
                            @shop.ShopPhone
                        </td>
                        <td>
                            @shop.ShopEmail
                        </td>
                        <td>
                            @shop.ShopOwnerPhone
                        </td>
                        <td>
                            @shop.ShopOwnerEmail
                        </td>
                        <td>
                            Edit | Delete
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    private List<Shop> shops;
    private int currentShopId;
    private string currentShopName;
    private string feedbackMessage = "";
    private Shop currentShop = new Shop();
    private Shop createShop = new Shop();
    private bool isProcessing = false;
    private bool isNavigating = false;

    protected override async Task OnInitializedAsync()
    {
        shops = await ShopService.GetShopsAsync();
    }

    private async Task HandleCreateValidSubmnit()
    {
        await CreateShop();
    }

    private async Task CreateShop()
    {
        isProcessing = true;

        isProcessing = false;
    }

    private async Task CloseModal()
    {
        await JS.InvokeVoidAsync("modals.closeModal", "createShopModal");
    }

    private void SetCurrentShop(Shop shop)
    {
        currentShop = shop;
    }

    private async Task HandleValidSubmit()
    {
        await SaveShop();
    }

    private async Task SaveShop()
    {
        Console.WriteLine("Attempting to save shop ...");
    }

    private void ConfirmDelete(int shopId, string shopName)
    {
        currentShopId = shopId;
        currentShopName = shopName;
        StateHasChanged();
    }

    private async Task DeleteShop()
    {
        bool deleted = await ShopService.DeleteShop(currentShopId);
        if (deleted)
        {
            shops.RemoveAll(x => x.Id == currentShopId);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to delte the shop.");
        }
    }
}
